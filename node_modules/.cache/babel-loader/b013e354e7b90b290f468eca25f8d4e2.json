{"ast":null,"code":"var _jsxFileName = \"/home/sakib/Documents/Level-3 Term-1/CSE 326 Internet Programming L/store/src/section/Customer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCustomers, getCreatedCustomer, getUpdatedCustomer, getDeletedCustomer } from \"../app/api\"; // Components\n\nimport DataTable from \"../components/DataTable\";\nimport CreateCustomer from \"../components/CreateCustomer\";\nimport UpdateCustomer from \"../components/UpdateCustomer\";\nimport DeleteCustomer from \"../components/DeleteCustomer\";\nimport Modal from \"../components/Modal\";\nimport Search from \"../components/Search\";\nimport Pagination from \"../components/Pagination\";\nimport Loader from \"../components/Loader\";\nimport MySwal from \"../index\";\nexport const Customer = () => {\n  const [loading, setLoading] = useState(false);\n  const [currentCustomer, setCurrentCustomer] = useState({\n    id: null,\n    avatar: null,\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\"\n  });\n  const [customers, setCustomers] = useState([]);\n  const [activeModal, setActiveModal] = useState({\n    name: \"\",\n    active: false\n  });\n  const [pageSize] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sorted, setSorted] = useState(false);\n  getCustomers().then(response => {\n    setCustomers(response.data);\n  }).catch(e => {\n    console.log(e);\n  });\n  console.log(customers);\n  const customersLastIndex = currentPage * pageSize;\n  const customersFirstIndex = customersLastIndex - pageSize;\n  const currentCustomers = customers.slice(customersFirstIndex, customersLastIndex); // Setting up Modal\n\n  const setModal = modal => {\n    search(\"\");\n    setActiveModal({\n      name: modal,\n      active: true\n    });\n  }; // Pagination\n\n\n  const paginate = page => {\n    setCurrentPage(page);\n  }; // Search\n\n\n  const search = term => {\n    if (term.length > 2) {\n      setCurrentPage(1);\n      const results = customers.filter(customer => Object.keys(customer).some(key => customer[key].toString().toLowerCase().includes(term.toString().toLowerCase())));\n      dispatch({\n        type: \"SET_CUSTOMERS\",\n        data: results\n      });\n    } else if (!term.length) {\n      dispatch({\n        type: \"SET_CUSTOMERS\",\n        data: customers\n      });\n    }\n  }; // Sorting\n\n\n  const sorting = key => {\n    setSorted(!sorted);\n\n    switch (key) {\n      case \"name\":\n        const nameSort = [...customers].sort((a, b) => {\n          return sorted ? a.first_name.localeCompare(b.first_name, \"tr\") : b.first_name.localeCompare(a.first_name, \"tr\");\n        });\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: nameSort\n        });\n        return;\n\n      case \"surname\":\n        const surnameSort = [...customers].sort((a, b) => {\n          return sorted ? a.last_name.localeCompare(b.last_name, \"tr\") : b.last_name.localeCompare(a.last_name, \"tr\");\n        });\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: surnameSort\n        });\n        return;\n\n      case \"email\":\n        const emailSort = [...customers].sort((a, b) => {\n          return sorted ? a.email.localeCompare(b.email, \"tr\") : b.email.localeCompare(a.email, \"tr\");\n        });\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: emailSort\n        });\n        return;\n\n      default:\n        break;\n    }\n  }; // Create Customer\n\n\n  const createCustomer = async customer => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getCreatedCustomer(customer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer created successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"CREATE_CUSTOMER\",\n            data: result\n          });\n          setCustomers([...users, result]);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to create customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Update Customer\n\n\n  const updateRow = customer => {\n    setModal(\"Update Customer\");\n    setCurrentCustomer({\n      id: customer.id,\n      avatar: customer.avatar,\n      first_name: customer.first_name,\n      last_name: customer.last_name,\n      email: customer.email\n    });\n  };\n\n  const updateCustomer = async (id, updatedCustomer) => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getUpdatedCustomer(id, updatedCustomer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer updated successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: users.map(customer => customer.id === id ? Object.assign(customer, result) : customer)\n          });\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to update customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Delete Customer\n\n\n  const deleteRow = customer => {\n    setModal(\"Delete Customer\");\n    setCurrentCustomer({\n      id: customer.id,\n      avatar: customer.avatar,\n      first_name: customer.first_name,\n      last_name: customer.last_name,\n      email: customer.email\n    });\n  };\n\n  const deleteCustomer = async id => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getDeletedCustomer(id).then(() => {\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer deleted successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: users.filter(customer => customer.id !== id)\n          });\n          setCustomers(customers.filter(customer => customer.id !== id));\n          setCurrentPage(1);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to delete customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Fetch Users\n\n\n  const fetchUsers = async () => {\n    setLoading(true);\n\n    try {\n      await getCustomers().then(({\n        data\n      }) => {\n        setCustomers(data.data);\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: data.data\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to fetch users.\"\n      });\n    } finally {\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    search: search,\n    resetSearch: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"primary-btn\",\n    onClick: () => setModal(\"Create Customer\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  }, \"Create New Customer\")), /*#__PURE__*/React.createElement(DataTable, {\n    users: currentCustomers,\n    updateRow: updateRow,\n    deleteRow: deleteRow,\n    onSortChange: sorting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Pagination, {\n    totalResults: users.length,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  })))), activeModal.active && /*#__PURE__*/React.createElement(Modal, {\n    activeModal: activeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }, activeModal.name === \"Create Customer\" && /*#__PURE__*/React.createElement(CreateCustomer, {\n    createCustomer: createCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }), activeModal.name === \"Update Customer\" && /*#__PURE__*/React.createElement(UpdateCustomer, {\n    currentCustomer: currentCustomer,\n    updateCustomer: updateCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }), activeModal.name === \"Delete Customer\" && /*#__PURE__*/React.createElement(DeleteCustomer, {\n    currentCustomer: currentCustomer,\n    deleteCustomer: deleteCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  })));\n};","map":{"version":3,"sources":["/home/sakib/Documents/Level-3 Term-1/CSE 326 Internet Programming L/store/src/section/Customer.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getCustomers","getCreatedCustomer","getUpdatedCustomer","getDeletedCustomer","DataTable","CreateCustomer","UpdateCustomer","DeleteCustomer","Modal","Search","Pagination","Loader","MySwal","Customer","loading","setLoading","currentCustomer","setCurrentCustomer","id","avatar","first_name","last_name","email","customers","setCustomers","activeModal","setActiveModal","name","active","pageSize","currentPage","setCurrentPage","sorted","setSorted","then","response","data","catch","e","console","log","customersLastIndex","customersFirstIndex","currentCustomers","slice","setModal","modal","search","paginate","page","term","length","results","filter","customer","Object","keys","some","key","toString","toLowerCase","includes","dispatch","type","sorting","nameSort","sort","a","b","localeCompare","surnameSort","emailSort","createCustomer","res","result","fire","icon","title","users","err","updateRow","updateCustomer","updatedCustomer","map","assign","deleteRow","deleteCustomer","fetchUsers","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getCustomers,\n  getCreatedCustomer,\n  getUpdatedCustomer,\n  getDeletedCustomer\n} from \"../app/api\";\n\n// Components\nimport DataTable from \"../components/DataTable\";\nimport CreateCustomer from \"../components/CreateCustomer\";\nimport UpdateCustomer from \"../components/UpdateCustomer\";\nimport DeleteCustomer from \"../components/DeleteCustomer\";\nimport Modal from \"../components/Modal\";\nimport Search from \"../components/Search\";\nimport Pagination from \"../components/Pagination\";\nimport Loader from \"../components/Loader\";\nimport MySwal from \"../index\";\n\nexport const Customer = () => {\n  const [loading, setLoading] = useState(false);  \n  const [currentCustomer, setCurrentCustomer] = useState({\n    id: null,\n    avatar: null,\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\"\n  });\n  const [customers, setCustomers] = useState([]);\n  const [activeModal, setActiveModal] = useState({ name: \"\", active: false });\n  const [pageSize] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sorted, setSorted] = useState(false);\n  \n  getCustomers()\n    .then((response) => {\n      setCustomers(response.data);\n    })\n    .catch(e => {\n      console.log(e);\n    });\n\n  console.log(customers);\n  const customersLastIndex = currentPage * pageSize;\n  const customersFirstIndex = customersLastIndex - pageSize;\n  const currentCustomers = customers.slice(customersFirstIndex, customersLastIndex);\n\n  // Setting up Modal\n  const setModal = modal => {\n    search(\"\");\n    setActiveModal({ name: modal, active: true });\n  };\n\n  // Pagination\n  const paginate = page => {\n    setCurrentPage(page);\n  };\n\n  // Search\n  const search = term => {\n    if (term.length > 2) {\n      setCurrentPage(1);\n\n      const results = customers.filter(customer =>\n        Object.keys(customer).some(key =>\n          customer[key]\n            .toString()\n            .toLowerCase()\n            .includes(term.toString().toLowerCase())\n        )\n      );\n\n      dispatch({ type: \"SET_CUSTOMERS\", data: results });\n    } else if (!term.length) {\n      dispatch({ type: \"SET_CUSTOMERS\", data: customers });\n    }\n  };\n\n  // Sorting\n  const sorting = key => {\n    setSorted(!sorted);\n    switch (key) {\n      case \"name\":\n        const nameSort = [...customers].sort((a, b) => {\n          return sorted\n            ? a.first_name.localeCompare(b.first_name, \"tr\")\n            : b.first_name.localeCompare(a.first_name, \"tr\");\n        });\n        dispatch({ type: \"SET_CUSTOMERS\", data: nameSort });\n        return;\n      case \"surname\":\n        const surnameSort = [...customers].sort((a, b) => {\n          return sorted\n            ? a.last_name.localeCompare(b.last_name, \"tr\")\n            : b.last_name.localeCompare(a.last_name, \"tr\");\n        });\n        dispatch({ type: \"SET_CUSTOMERS\", data: surnameSort });\n        return;\n      case \"email\":\n        const emailSort = [...customers].sort((a, b) => {\n          return sorted\n            ? a.email.localeCompare(b.email, \"tr\")\n            : b.email.localeCompare(a.email, \"tr\");\n        });\n        dispatch({ type: \"SET_CUSTOMERS\", data: emailSort });\n        return;\n      default:\n        break;\n    }\n  };\n\n  // Create Customer\n  const createCustomer = async customer => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getCreatedCustomer(customer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer created successfully.\"\n        }).then(() => {\n          dispatch({ type: \"CREATE_CUSTOMER\", data: result });\n          setCustomers([...users, result]);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to create customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update Customer\n  const updateRow = customer => {\n    setModal(\"Update Customer\");\n\n    setCurrentCustomer({\n      id: customer.id,\n      avatar: customer.avatar,\n      first_name: customer.first_name,\n      last_name: customer.last_name,\n      email: customer.email\n    });\n  };\n\n  const updateCustomer = async (id, updatedCustomer) => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getUpdatedCustomer(id, updatedCustomer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer updated successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: users.map(customer =>\n              customer.id === id ? Object.assign(customer, result) : customer\n            )\n          });\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to update customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete Customer\n  const deleteRow = customer => {\n    setModal(\"Delete Customer\");\n\n    setCurrentCustomer({\n      id: customer.id,\n      avatar: customer.avatar,\n      first_name: customer.first_name,\n      last_name: customer.last_name,\n      email: customer.email\n    });\n  };\n\n  const deleteCustomer = async id => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getDeletedCustomer(id).then(() => {\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer deleted successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: users.filter(customer => customer.id !== id)\n          });\n          setCustomers(customers.filter(customer => customer.id !== id));\n          setCurrentPage(1);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to delete customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch Users\n  const fetchUsers = async () => {\n    setLoading(true);\n\n    try {\n      await getCustomers().then(({ data }) => {\n        setCustomers(data.data);\n        dispatch({ type: \"SET_CUSTOMERS\", data: data.data });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to fetch users.\"\n      });\n    } finally {\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <main className=\"content\">\n        <div className=\"container\">\n          {loading ? (\n            <Loader />\n          ) : (\n            <div className=\"content-wrapper\">\n              <div className=\"toolbar\">\n                <Search search={search} resetSearch={search} />\n                <button\n                  className=\"primary-btn\"\n                  onClick={() => setModal(\"Create Customer\")}\n                >\n                  Create New Customer\n                </button>\n              </div>\n              <DataTable\n                users={currentCustomers}\n                updateRow={updateRow}\n                deleteRow={deleteRow}\n                onSortChange={sorting}\n              />\n              <Pagination\n                totalResults={users.length}\n                currentPage={currentPage}\n                pageSize={pageSize}\n                paginate={paginate}\n              />\n            </div>\n          )}\n        </div>\n      </main>\n      {activeModal.active && (\n        <Modal activeModal={activeModal}>\n          {activeModal.name === \"Create Customer\" && (\n            <CreateCustomer\n              createCustomer={createCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n          {activeModal.name === \"Update Customer\" && (\n            <UpdateCustomer\n              currentCustomer={currentCustomer}\n              updateCustomer={updateCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n          {activeModal.name === \"Delete Customer\" && (\n            <DeleteCustomer\n              currentCustomer={currentCustomer}\n              deleteCustomer={deleteCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n        </Modal>\n      )}\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}