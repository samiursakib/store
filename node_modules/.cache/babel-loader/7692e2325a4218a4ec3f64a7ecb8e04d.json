{"ast":null,"code":"var _jsxFileName = \"/home/sakib/Documents/Level-3 Term-1/CSE 326 Internet Programming L/store/src/section/Customer.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getCustomers, getCreatedCustomer, getUpdatedCustomer, getDeletedCustomer } from \"../app/api\"; // Components\n\nimport DataTable from \"../components/DataTable\";\nimport CreateCustomer from \"../components/CreateCustomer\";\nimport UpdateCustomer from \"../components/UpdateCustomer\";\nimport DeleteCustomer from \"../components/DeleteCustomer\";\nimport Modal from \"../components/Modal\";\nimport Search from \"../components/Search\";\nimport Pagination from \"../components/Pagination\";\nimport Loader from \"../components/Loader\";\nimport MySwal from \"../index\";\nexport const Customer = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [currentCustomer, setCurrentCustomer] = useState({\n    id: null,\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [customers, setCustomers] = useState([]);\n  const [activeModal, setActiveModal] = useState({\n    name: \"\",\n    active: false\n  });\n  const [pageSize] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sorted, setSorted] = useState(false);\n  getCustomers().then(response => {\n    setCustomers(response.data);\n  }).catch(e => {\n    console.log(e);\n  });\n  const customersLastIndex = currentPage * pageSize;\n  const customersFirstIndex = customersLastIndex - pageSize;\n  const currentCustomers = customers.slice(customersFirstIndex, customersLastIndex); // Setting up Modal\n\n  const setModal = modal => {\n    search(\"\");\n    setActiveModal({\n      name: modal,\n      active: true\n    });\n  }; // Pagination\n\n\n  const paginate = page => {\n    setCurrentPage(page);\n  }; // Search\n  // const search = term => {\n  //   if (term.length > 2) {\n  //     setCurrentPage(1);\n  //     const results = customers.filter(customer =>\n  //       Object.keys(customer).some(key =>\n  //         customer[key]\n  //           .toString()\n  //           .toLowerCase()\n  //           .includes(term.toString().toLowerCase())\n  //       )\n  //     );\n  //     console.log(results);\n  //     dispatch({ type: \"SET_CUSTOMERS\", data: results });\n  //   } else if (!term.length) {\n  //     dispatch({ type: \"SET_CUSTOMERS\", data: customers });\n  //   }\n  // };\n  // // Sorting\n  // const sorting = key => {\n  //   setSorted(!sorted);\n  //   switch (key) {\n  //     case \"name\":\n  //       const nameSort = [...customers].sort((a, b) => {\n  //         return sorted\n  //           ? a.username.localeCompare(b.username, \"tr\")\n  //           : b.username.localeCompare(a.username, \"tr\");\n  //       });\n  //       dispatch({ type: \"SET_CUSTOMERS\", data: nameSort });\n  //       return;\n  //     case \"surname\":\n  //       const surnameSort = [...customers].sort((a, b) => {\n  //         return sorted\n  //           ? a.last_name.localeCompare(b.last_name, \"tr\")\n  //           : b.last_name.localeCompare(a.last_name, \"tr\");\n  //       });\n  //       dispatch({ type: \"SET_CUSTOMERS\", data: surnameSort });\n  //       return;\n  //     case \"email\":\n  //       const emailSort = [...customers].sort((a, b) => {\n  //         return sorted\n  //           ? a.email.localeCompare(b.email, \"tr\")\n  //           : b.email.localeCompare(a.email, \"tr\");\n  //       });\n  //       dispatch({ type: \"SET_CUSTOMERS\", data: emailSort });\n  //       return;\n  //     default:\n  //       break;\n  //   }\n  // };\n  // Create Customer\n\n\n  const createCustomer = async customer => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getCreatedCustomer(customer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer created successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"CREATE_CUSTOMER\",\n            data: result\n          });\n          setCustomers([...customers, result]);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to create customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Update Customer\n\n\n  const updateRow = customer => {\n    setModal(\"Update Customer\");\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,\n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const updateCustomer = async (id, updatedCustomer) => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getUpdatedCustomer(id, updatedCustomer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer updated successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.map(customer => customer.id === id ? Object.assign(customer, result) : customer)\n          });\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to update customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Delete Customer\n\n\n  const deleteRow = customer => {\n    setModal(\"Delete Customer\");\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,\n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const deleteCustomer = async id => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getDeletedCustomer(id).then(() => {\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer deleted successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.filter(customer => customer.id !== id)\n          });\n          setCustomers(customers.filter(customer => customer.id !== id));\n          setCurrentPage(1);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to delete customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Fetch Users\n\n\n  const fetchUsers = async () => {\n    setLoading(true);\n\n    try {\n      await getCustomers().then(({\n        data\n      }) => {\n        setCustomers(data.data);\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: data.data\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to fetch customers.\"\n      });\n    } finally {\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    search: search,\n    resetSearch: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"primary-btn\",\n    onClick: () => setModal(\"Create Customer\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }\n  }, \"Create New Customer\")), /*#__PURE__*/React.createElement(DataTable, {\n    customers: currentCustomers,\n    updateRow: updateRow,\n    deleteRow: deleteRow,\n    onSortChange: sorting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Pagination, {\n    totalResults: customers.length,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  })))), activeModal.active && /*#__PURE__*/React.createElement(Modal, {\n    activeModal: activeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, activeModal.name === \"Create Customer\" && /*#__PURE__*/React.createElement(CreateCustomer, {\n    createCustomer: createCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }\n  }), activeModal.name === \"Update Customer\" && /*#__PURE__*/React.createElement(UpdateCustomer, {\n    currentCustomer: currentCustomer,\n    updateCustomer: updateCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }), activeModal.name === \"Delete Customer\" && /*#__PURE__*/React.createElement(DeleteCustomer, {\n    currentCustomer: currentCustomer,\n    deleteCustomer: deleteCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  })));\n};","map":{"version":3,"sources":["/home/sakib/Documents/Level-3 Term-1/CSE 326 Internet Programming L/store/src/section/Customer.js"],"names":["React","useState","useDispatch","getCustomers","getCreatedCustomer","getUpdatedCustomer","getDeletedCustomer","DataTable","CreateCustomer","UpdateCustomer","DeleteCustomer","Modal","Search","Pagination","Loader","MySwal","Customer","dispatch","loading","setLoading","currentCustomer","setCurrentCustomer","id","username","email","password","customers","setCustomers","activeModal","setActiveModal","name","active","pageSize","currentPage","setCurrentPage","sorted","setSorted","then","response","data","catch","e","console","log","customersLastIndex","customersFirstIndex","currentCustomers","slice","setModal","modal","search","paginate","page","createCustomer","customer","res","result","fire","icon","title","type","err","updateRow","updateCustomer","updatedCustomer","map","Object","assign","deleteRow","deleteCustomer","filter","fetchUsers","setTimeout","sorting","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  getCustomers,\n  getCreatedCustomer,\n  getUpdatedCustomer,\n  getDeletedCustomer\n} from \"../app/api\";\n\n// Components\nimport DataTable from \"../components/DataTable\";\nimport CreateCustomer from \"../components/CreateCustomer\";\nimport UpdateCustomer from \"../components/UpdateCustomer\";\nimport DeleteCustomer from \"../components/DeleteCustomer\";\nimport Modal from \"../components/Modal\";\nimport Search from \"../components/Search\";\nimport Pagination from \"../components/Pagination\";\nimport Loader from \"../components/Loader\";\nimport MySwal from \"../index\";\n\nexport const Customer = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);  \n  const [currentCustomer, setCurrentCustomer] = useState({\n    id: null,\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [customers, setCustomers] = useState([]);\n  const [activeModal, setActiveModal] = useState({ name: \"\", active: false });\n  const [pageSize] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sorted, setSorted] = useState(false);\n  \n  getCustomers()\n    .then((response) => {\n      setCustomers(response.data);\n    })\n    .catch(e => {\n      console.log(e);\n    });\n\n  const customersLastIndex = currentPage * pageSize;\n  const customersFirstIndex = customersLastIndex - pageSize;\n  const currentCustomers = customers.slice(customersFirstIndex, customersLastIndex);\n\n  // Setting up Modal\n  const setModal = modal => {\n    search(\"\");\n    setActiveModal({ name: modal, active: true });\n  };\n\n  // Pagination\n  const paginate = page => {\n    setCurrentPage(page);\n  };\n\n  // Search\n  // const search = term => {\n  //   if (term.length > 2) {\n  //     setCurrentPage(1);\n\n  //     const results = customers.filter(customer =>\n  //       Object.keys(customer).some(key =>\n  //         customer[key]\n  //           .toString()\n  //           .toLowerCase()\n  //           .includes(term.toString().toLowerCase())\n  //       )\n  //     );\n  //     console.log(results);\n\n  //     dispatch({ type: \"SET_CUSTOMERS\", data: results });\n  //   } else if (!term.length) {\n  //     dispatch({ type: \"SET_CUSTOMERS\", data: customers });\n  //   }\n  // };\n\n  // // Sorting\n  // const sorting = key => {\n  //   setSorted(!sorted);\n  //   switch (key) {\n  //     case \"name\":\n  //       const nameSort = [...customers].sort((a, b) => {\n  //         return sorted\n  //           ? a.username.localeCompare(b.username, \"tr\")\n  //           : b.username.localeCompare(a.username, \"tr\");\n  //       });\n  //       dispatch({ type: \"SET_CUSTOMERS\", data: nameSort });\n  //       return;\n  //     case \"surname\":\n  //       const surnameSort = [...customers].sort((a, b) => {\n  //         return sorted\n  //           ? a.last_name.localeCompare(b.last_name, \"tr\")\n  //           : b.last_name.localeCompare(a.last_name, \"tr\");\n  //       });\n  //       dispatch({ type: \"SET_CUSTOMERS\", data: surnameSort });\n  //       return;\n  //     case \"email\":\n  //       const emailSort = [...customers].sort((a, b) => {\n  //         return sorted\n  //           ? a.email.localeCompare(b.email, \"tr\")\n  //           : b.email.localeCompare(a.email, \"tr\");\n  //       });\n  //       dispatch({ type: \"SET_CUSTOMERS\", data: emailSort });\n  //       return;\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  // Create Customer\n  const createCustomer = async customer => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getCreatedCustomer(customer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer created successfully.\"\n        }).then(() => {\n          dispatch({ type: \"CREATE_CUSTOMER\", data: result });\n          setCustomers([...customers, result]);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to create customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update Customer\n  const updateRow = customer => {\n    setModal(\"Update Customer\");\n\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,      \n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const updateCustomer = async (id, updatedCustomer) => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getUpdatedCustomer(id, updatedCustomer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer updated successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.map(customer =>\n              customer.id === id ? Object.assign(customer, result) : customer\n            )\n          });\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to update customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete Customer\n  const deleteRow = customer => {\n    setModal(\"Delete Customer\");\n\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,\n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const deleteCustomer = async id => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getDeletedCustomer(id).then(() => {\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer deleted successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.filter(customer => customer.id !== id)\n          });\n          setCustomers(customers.filter(customer => customer.id !== id));\n          setCurrentPage(1);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to delete customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch Users\n  const fetchUsers = async () => {\n    setLoading(true);\n\n    try {\n      await getCustomers().then(({ data }) => {\n        setCustomers(data.data);\n        dispatch({ type: \"SET_CUSTOMERS\", data: data.data });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to fetch customers.\"\n      });\n    } finally {\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <main className=\"content\">\n        <div className=\"container\">\n          {loading ? (\n            <Loader />\n          ) : (\n            <div className=\"content-wrapper\">\n              <div className=\"toolbar\">\n                <Search search={search} resetSearch={search} />\n                <button\n                  className=\"primary-btn\"\n                  onClick={() => setModal(\"Create Customer\")}\n                >\n                  Create New Customer\n                </button>\n              </div>\n              <DataTable\n                customers={currentCustomers}\n                updateRow={updateRow}\n                deleteRow={deleteRow}\n                onSortChange={sorting}\n              />\n              <Pagination\n                totalResults={customers.length}\n                currentPage={currentPage}\n                pageSize={pageSize}\n                paginate={paginate}\n              />\n            </div>\n          )}\n        </div>\n      </main>\n      {activeModal.active && (\n        <Modal activeModal={activeModal}>\n          {activeModal.name === \"Create Customer\" && (\n            <CreateCustomer\n              createCustomer={createCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n          {activeModal.name === \"Update Customer\" && (\n            <UpdateCustomer\n              currentCustomer={currentCustomer}\n              updateCustomer={updateCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n          {activeModal.name === \"Delete Customer\" && (\n            <DeleteCustomer\n              currentCustomer={currentCustomer}\n              deleteCustomer={deleteCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n        </Modal>\n      )}\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}