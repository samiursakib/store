{"ast":null,"code":"var _jsxFileName = \"/home/sakib/Documents/Level-3 Term-1/CSE 326 Internet Programming L/store/src/section/Customer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCustomers, getCreatedCustomer, getUpdatedCustomer, getDeletedCustomer } from \"../app/api\"; // Components\n\nimport DataTable from \"../components/DataTable\";\nimport CreateCustomer from \"../components/CreateCustomer\";\nimport UpdateCustomer from \"../components/UpdateCustomer\";\nimport DeleteCustomer from \"../components/DeleteCustomer\";\nimport Modal from \"../components/Modal\";\nimport Search from \"../components/Search\";\nimport Pagination from \"../components/Pagination\";\nimport Loader from \"../components/Loader\";\nimport MySwal from \"../index\";\nexport const Customer = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [currentCustomer, setCurrentCustomer] = useState({\n    id: null,\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [customers, setCustomers] = useState([]);\n  const [activeModal, setActiveModal] = useState({\n    name: \"\",\n    active: false\n  });\n  const [pageSize] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sorted, setSorted] = useState(false); // getCustomers()\n  //   .then((response) => {\n  //     setCustomers(response.data);\n  //   })\n  //   .catch(e => {\n  //     console.log(e);\n  //   });\n\n  useEffect(() => {\n    fetchCustomers();\n  }, [fetchCustomers]);\n  const customersLastIndex = currentPage * pageSize;\n  const customersFirstIndex = customersLastIndex - pageSize;\n  const currentCustomers = customers.slice(customersFirstIndex, customersLastIndex); // Setting up Modal\n\n  const setModal = modal => {\n    search(\"\");\n    setActiveModal({\n      name: modal,\n      active: true\n    });\n  }; // Pagination\n\n\n  const paginate = page => {\n    setCurrentPage(page);\n  }; // Search\n\n\n  const search = term => {\n    if (term.length > 2) {\n      setCurrentPage(1);\n      const results = customers.filter(customer => Object.keys(customer).some(key => customer[key].toString().toLowerCase().includes(term.toString().toLowerCase())));\n      dispatch({\n        type: \"SET_CUSTOMERS\",\n        data: results\n      });\n    } else if (!term.length) {\n      dispatch({\n        type: \"SET_CUSTOMERS\",\n        data: customers\n      });\n    }\n  }; // Sorting\n\n\n  const sorting = key => {\n    setSorted(!sorted);\n\n    switch (key) {\n      case \"name\":\n        const nameSort = [...customers].sort((a, b) => {\n          return sorted ? a.username.localeCompare(b.username, \"tr\") : b.username.localeCompare(a.username, \"tr\");\n        });\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: nameSort\n        });\n        return;\n\n      case \"email\":\n        const emailSort = [...customers].sort((a, b) => {\n          return sorted ? a.email.localeCompare(b.email, \"tr\") : b.email.localeCompare(a.email, \"tr\");\n        });\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: emailSort\n        });\n        return;\n\n      default:\n        break;\n    }\n  }; // Create Customer\n\n\n  const createCustomer = async customer => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getCreatedCustomer(customer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer created successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"CREATE_CUSTOMER\",\n            data: result\n          });\n          setCustomers([...customers, result]);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to create customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Update Customer\n\n\n  const updateRow = customer => {\n    setModal(\"Update Customer\");\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,\n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const updateCustomer = async (id, updatedCustomer) => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getUpdatedCustomer(id, updatedCustomer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer updated successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.map(customer => customer.id === id ? Object.assign(customer, result) : customer)\n          });\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to update customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Delete Customer\n\n\n  const deleteRow = customer => {\n    setModal(\"Delete Customer\");\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,\n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const deleteCustomer = async id => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getDeletedCustomer(id).then(() => {\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer deleted successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.filter(customer => customer.id !== id)\n          });\n          setCustomers(customers.filter(customer => customer.id !== id));\n          setCurrentPage(1);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to delete customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }; // Fetch Users\n\n\n  const fetchCustomers = async () => {\n    setLoading(true);\n\n    try {\n      await getCustomers().then(({\n        data\n      }) => {\n        setCustomers(data.data);\n        dispatch({\n          type: \"SET_CUSTOMERS\",\n          data: data.data\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to fetch customers.\"\n      });\n    } finally {\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    search: search,\n    resetSearch: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"primary-btn\",\n    onClick: () => setModal(\"Create Customer\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 17\n    }\n  }, \"Create New Customer\")), /*#__PURE__*/React.createElement(DataTable, {\n    customers: currentCustomers,\n    updateRow: updateRow,\n    deleteRow: deleteRow,\n    onSortChange: sorting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Pagination, {\n    totalResults: customers.length,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  })))), activeModal.active && /*#__PURE__*/React.createElement(Modal, {\n    activeModal: activeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, activeModal.name === \"Create Customer\" && /*#__PURE__*/React.createElement(CreateCustomer, {\n    createCustomer: createCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }), activeModal.name === \"Update Customer\" && /*#__PURE__*/React.createElement(UpdateCustomer, {\n    currentCustomer: currentCustomer,\n    updateCustomer: updateCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }), activeModal.name === \"Delete Customer\" && /*#__PURE__*/React.createElement(DeleteCustomer, {\n    currentCustomer: currentCustomer,\n    deleteCustomer: deleteCustomer,\n    setActiveModal: setActiveModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  })));\n};","map":{"version":3,"sources":["/home/sakib/Documents/Level-3 Term-1/CSE 326 Internet Programming L/store/src/section/Customer.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getCustomers","getCreatedCustomer","getUpdatedCustomer","getDeletedCustomer","DataTable","CreateCustomer","UpdateCustomer","DeleteCustomer","Modal","Search","Pagination","Loader","MySwal","Customer","dispatch","loading","setLoading","currentCustomer","setCurrentCustomer","id","username","email","password","customers","setCustomers","activeModal","setActiveModal","name","active","pageSize","currentPage","setCurrentPage","sorted","setSorted","fetchCustomers","customersLastIndex","customersFirstIndex","currentCustomers","slice","setModal","modal","search","paginate","page","term","length","results","filter","customer","Object","keys","some","key","toString","toLowerCase","includes","type","data","sorting","nameSort","sort","a","b","localeCompare","emailSort","createCustomer","then","res","result","fire","icon","title","err","updateRow","updateCustomer","updatedCustomer","map","assign","deleteRow","deleteCustomer","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getCustomers,\n  getCreatedCustomer,\n  getUpdatedCustomer,\n  getDeletedCustomer\n} from \"../app/api\";\n\n// Components\nimport DataTable from \"../components/DataTable\";\nimport CreateCustomer from \"../components/CreateCustomer\";\nimport UpdateCustomer from \"../components/UpdateCustomer\";\nimport DeleteCustomer from \"../components/DeleteCustomer\";\nimport Modal from \"../components/Modal\";\nimport Search from \"../components/Search\";\nimport Pagination from \"../components/Pagination\";\nimport Loader from \"../components/Loader\";\nimport MySwal from \"../index\";\n\nexport const Customer = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);  \n  const [currentCustomer, setCurrentCustomer] = useState({\n    id: null,\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [customers, setCustomers] = useState([]);\n  const [activeModal, setActiveModal] = useState({ name: \"\", active: false });\n  const [pageSize] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sorted, setSorted] = useState(false);\n  \n  // getCustomers()\n  //   .then((response) => {\n\n  //     setCustomers(response.data);\n  //   })\n  //   .catch(e => {\n  //     console.log(e);\n  //   });\n\n  useEffect(() => {\n    fetchCustomers();\n  }, [fetchCustomers]);\n\n  const customersLastIndex = currentPage * pageSize;\n  const customersFirstIndex = customersLastIndex - pageSize;\n  const currentCustomers = customers.slice(customersFirstIndex, customersLastIndex);\n\n  // Setting up Modal\n  const setModal = modal => {\n    search(\"\");\n    setActiveModal({ name: modal, active: true });\n  };\n\n  // Pagination\n  const paginate = page => {\n    setCurrentPage(page);\n  };\n\n  // Search\n  const search = term => {\n    if (term.length > 2) {\n      setCurrentPage(1);\n\n      const results = customers.filter(customer =>\n        Object.keys(customer).some(key =>\n          customer[key]\n            .toString()\n            .toLowerCase()\n            .includes(term.toString().toLowerCase())\n        )\n      );\n\n      dispatch({ type: \"SET_CUSTOMERS\", data: results });\n    } else if (!term.length) {\n      dispatch({ type: \"SET_CUSTOMERS\", data: customers });\n    }\n  };\n\n  // Sorting\n  const sorting = key => {\n    setSorted(!sorted);\n    switch (key) {\n      case \"name\":\n        const nameSort = [...customers].sort((a, b) => {\n          return sorted\n            ? a.username.localeCompare(b.username, \"tr\")\n            : b.username.localeCompare(a.username, \"tr\");\n        });\n        dispatch({ type: \"SET_CUSTOMERS\", data: nameSort });\n        return;\n      case \"email\":\n        const emailSort = [...customers].sort((a, b) => {\n          return sorted\n            ? a.email.localeCompare(b.email, \"tr\")\n            : b.email.localeCompare(a.email, \"tr\");\n        });\n        dispatch({ type: \"SET_CUSTOMERS\", data: emailSort });\n        return;\n      default:\n        break;\n    }\n  };\n\n  // Create Customer\n  const createCustomer = async customer => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getCreatedCustomer(customer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer created successfully.\"\n        }).then(() => {\n          dispatch({ type: \"CREATE_CUSTOMER\", data: result });\n          setCustomers([...customers, result]);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to create customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update Customer\n  const updateRow = customer => {\n    setModal(\"Update Customer\");\n\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,      \n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const updateCustomer = async (id, updatedCustomer) => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getUpdatedCustomer(id, updatedCustomer).then(res => {\n        const result = res.data;\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer updated successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.map(customer =>\n              customer.id === id ? Object.assign(customer, result) : customer\n            )\n          });\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to update customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete Customer\n  const deleteRow = customer => {\n    setModal(\"Delete Customer\");\n\n    setCurrentCustomer({\n      id: customer.id,\n      username: customer.username,\n      email: customer.email,\n      password: customer.password\n    });\n  };\n\n  const deleteCustomer = async id => {\n    setActiveModal(false);\n    setLoading(true);\n\n    try {\n      await getDeletedCustomer(id).then(() => {\n        MySwal.fire({\n          icon: \"success\",\n          title: \"Customer deleted successfully.\"\n        }).then(() => {\n          dispatch({\n            type: \"SET_CUSTOMERS\",\n            data: customers.filter(customer => customer.id !== id)\n          });\n          setCustomers(customers.filter(customer => customer.id !== id));\n          setCurrentPage(1);\n        });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to delete customer.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch Users\n  const fetchCustomers = async () => {\n    setLoading(true);\n\n    try {\n      await getCustomers().then(({ data }) => {\n        setCustomers(data.data);\n        dispatch({ type: \"SET_CUSTOMERS\", data: data.data });\n      });\n    } catch (err) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Failed to fetch customers.\"\n      });\n    } finally {\n      setTimeout(() => {\n        setLoading(false);\n      }, 500);\n    }\n  };\n\n\n\n  return (\n    <div className=\"app\">\n      <main className=\"content\">\n        <div className=\"container\">\n          {loading ? (\n            <Loader />\n          ) : (\n            <div className=\"content-wrapper\">\n              <div className=\"toolbar\">\n                <Search search={search} resetSearch={search} />\n                <button\n                  className=\"primary-btn\"\n                  onClick={() => setModal(\"Create Customer\")}\n                >\n                  Create New Customer\n                </button>\n              </div>\n              <DataTable\n                customers={currentCustomers}\n                updateRow={updateRow}\n                deleteRow={deleteRow}\n                onSortChange={sorting}\n              />\n              <Pagination\n                totalResults={customers.length}\n                currentPage={currentPage}\n                pageSize={pageSize}\n                paginate={paginate}\n              />\n            </div>\n          )}\n        </div>\n      </main>\n      {activeModal.active && (\n        <Modal activeModal={activeModal}>\n          {activeModal.name === \"Create Customer\" && (\n            <CreateCustomer\n              createCustomer={createCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n          {activeModal.name === \"Update Customer\" && (\n            <UpdateCustomer\n              currentCustomer={currentCustomer}\n              updateCustomer={updateCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n          {activeModal.name === \"Delete Customer\" && (\n            <DeleteCustomer\n              currentCustomer={currentCustomer}\n              deleteCustomer={deleteCustomer}\n              setActiveModal={setActiveModal}\n            />\n          )}\n        </Modal>\n      )}\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}